`use strict`

document.addEventListener("DOMContentLoaded", function (e) {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    const cardsContainer = document.querySelector(".cart-content__added-products-cards");
    const numberOfProducts = document.querySelector(".header__nav-link-number-of-products");
    const selectedProductsDelete = document.querySelector(".cart-content__added-products-delete-selected-ones");
    const prodAllSpan = document.querySelector(".products-to-purchase__all-span");
    const prodAmountSpan = document.querySelector(".products-to-purchase__amount-span");
    const wrapperArrangeProducts = document.querySelector(".wrapper-arrange__products");
    const btnDeleteSelectedCards = document.querySelector(".cart-content__added-products-delete-selected-ones");
    const btnAllSelectProducts = document.querySelector(".cart-content__added-products-select");
    const btnDeleteProduct = document.querySelector(".added-card__remove");

    // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    class CartManager {
        cartItems = []; // –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cartStorageKey = "dnr-sale-cart"; // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
        selectedProducts = []; // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–∞–º–∏)
        selectedProductIds = []; // –ú–∞—Å—Å–∏–≤ id –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

        constructor() {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.loadCart.bind(this);
            cardsContainer.addEventListener("change", this.changeProductCheckboxes.bind(this));
            btnDeleteSelectedCards.addEventListener("click", this.btnDeleteSelectedProducts.bind(this));
            btnAllSelectProducts.addEventListener("click", this.methodAllSelectProducts.bind(this));
            cardsContainer.addEventListener("click", this.deleteOneProduct.bind(this));
            cardsContainer.addEventListener("click", this.editQuantityProduct.bind(this));
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã
        loadCart() {
            // localStorage.removeItem("selectedProd");
            const cartItems = JSON.parse(localStorage.getItem('cart'));
            if (!cartItems) return;
            this.cartItems = cartItems;
            cardsContainer.innerHTML = "";

            // üü¢ –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            this.selectedProducts = JSON.parse(localStorage.getItem("selectedProd")) || [];

            // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
            this.updateCartIconCount();

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            this.renderCartItems();

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            this.renderArrangeProducts();
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            this.selectedQuantityAndAmount();

            // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë"
            this.conditionBtnAllSelectProducts();


        }

        // –ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë"
        conditionBtnAllSelectProducts() {

            const allCheckbox = document.querySelectorAll(".added-card__checkbox");

            const allChecked = Array.from(allCheckbox).every(function (elem) {
                return elem.checked === true;
            });

            // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω—ã, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–µ 
            if (allChecked) {
                btnAllSelectProducts.classList.add("active-select-all");
            }

        }

        saveCart() {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
        }

        removeFromCart() {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
        }

        clearCart() {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
        }

        editQuantityProduct(e) {
            const productCard = e.target.closest(".added-card");
            const productId = Number(e.target.closest(".added-card").dataset.id);
            let productQuantityMinus;
            let productQuantityPlus;

            if (e.target.classList.contains("quantity-btn--minus")) {
                this.cartItems.forEach(product => {
                    if (product.id === productId) {
                        if (product.quantity >= 2) {
                            product.quantity -= 1;
                            productCard.querySelector(".quantity-value").textContent = product.quantity;
                            productQuantityMinus = product.quantity;

                            
                        } else {
                            product.quantity = 1;
                            productCard.querySelector(".quantity-value").textContent = product.quantity;
                            productQuantityMinus = product.quantity;
                        }
                    }




                });


                this.selectedProducts.forEach(selectProd => {
                    if (selectProd.id === productId) {
                        selectProd.quantity = productQuantityMinus;
                        document.querySelector(`.arrange-card[data-id="${productId}"]`).querySelector(".arrange-card__quantity-value").textContent = selectProd.quantity;
                    }
                });

                localStorage.setItem("cart", JSON.stringify(this.cartItems));
                localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

                this.selectedQuantityAndAmount();


                

            }

            if (e.target.classList.contains("quantity-btn--plus")) {
                this.cartItems.forEach(product => {
                    if (product.id === productId) {
                        if (product.quantity < 10) {
                            product.quantity += 1;
                            productCard.querySelector(".quantity-value").textContent = product.quantity;
                            productQuantityPlus = product.quantity;
                        } else {
                        product.quantity = 10;
                        productCard.querySelector(".quantity-value").textContent = product.quantity;
                        productQuantityPlus = product.quantity;
                        }
                    }
                });


                this.selectedProducts.forEach(selectProd => {
                    if (selectProd.id === productId) {
                        selectProd.quantity = productQuantityPlus;
                        document.querySelector(`.arrange-card[data-id="${productId}"]`).querySelector(".arrange-card__quantity-value").textContent = selectProd.quantity;
                    }
                });




                localStorage.setItem("cart", JSON.stringify(this.cartItems));
                localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

                this.selectedQuantityAndAmount();
    
            }

        }

        // –ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        methodAllSelectProducts(e) {
            const allCheckbox = document.querySelectorAll(".added-card__checkbox");

            const allChecked = Array.from(allCheckbox).every(function (elem) {
                return elem.checked === true;
            });

            if (allChecked) {

            allCheckbox.forEach(checkbox => {
                checkbox.checked = false;
                this.selectedProducts = [];
                btnAllSelectProducts.classList.remove("active-select-all");
            });

            } else {
            allCheckbox.forEach(checkbox => {
                checkbox.checked = true;
                this.selectedProducts = this.cartItems;
                btnAllSelectProducts.classList.add("active-select-all");
            });
            }


            localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –ø–æ–¥—Å—á—ë—Ç —Å–∫–æ–ª—å–∫–æ
            this.renderArrangeProducts();
            this.selectedQuantityAndAmount();



        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        renderCartItems() {
            console.log(this.cartItems);
            

            if (this.cartItems.length <= 0) return; 

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏–∑ localStorage
            const checkboxCards = JSON.parse(localStorage.getItem("selectedProd")) || [];


            this.cartItems.forEach((product, i) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–º–µ—á–µ–Ω –ª–∏ —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞

                let isChecked = checkboxCards.some(item => item.id === product.id) ? "checked" : "";


                
                // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
                let html = `
                    <div class="cart-content__added-products-cards" id="${product.id}">
                        <div class="added-card" data-id="${product.id}">
                        <!-- –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ -->
                        <label class="added-card__select">
                            <input type="checkbox" class="added-card__checkbox"  
                            ${isChecked}/>
                            <span></span>
                        </label>
                        <!-- –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ -->
                        <div class="added-card__image">
                            <img src="${product.images}" alt="${product.title}" />
                        </div>
                        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ -->
                        <div class="added-card__info">
                            <div class="added-card__title">${product.title}</div>
                            <div class="added-card__descr">${product.descr}</div>
                            <div class="added-card__price">${Math.round(product.price * 90)} ‚ÇΩ</div>
                        </div>
                        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º -->
                        <div class="added-card__quantity">
                            <button class="quantity-btn quantity-btn--minus">‚àí</button>
                            <span class="quantity-value">${product.quantity}</span>
                            <button class="quantity-btn quantity-btn--plus">+</button>
                        </div>
                        <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                        <button class="added-card__remove">
                            <i class="fa-solid fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                        </div>
                    </div>
                `;
                // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                cardsContainer.insertAdjacentHTML("afterbegin", html);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å—ã
        changeProductCheckboxes(e) {
        const product = e.target.closest(".added-card");
        const productId = Number(product.dataset.id);

        const foundProduct = this.cartItems.find(p => p.id === productId);
        if (!foundProduct) return;

        if (e.target.checked) {
            // –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            const alreadySelected = this.selectedProducts.some(p => p.id === productId);
            if (!alreadySelected) this.selectedProducts.push(foundProduct);
        } else {
            // –£–¥–∞–ª—è–µ–º
            this.selectedProducts = this.selectedProducts.filter(p => p.id !== productId);
            btnAllSelectProducts.classList.remove("active-select-all");
        }

        if (this.selectedProducts.length === this.cartItems.length) {
            btnAllSelectProducts.classList.add("active-select-all");
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.selectedQuantityAndAmount();
        this.renderArrangeProducts();
        }



        // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        selectedQuantityAndAmount() {
            const products = JSON.parse(localStorage.getItem("selectedProd")) || [];

            if (products.length >= 1) {
                let prodAll = 0;
                let prodAmount = 0;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                selectedProductsDelete.classList.remove("hidden");
                products.forEach((prod) => {
                    prodAmount += Math.round(prod.price * 90) * prod.quantity;
                    prodAll += prod.quantity;
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã
                prodAllSpan.textContent = prodAll;
                prodAmountSpan.textContent = `${prodAmount} ‚ÇΩ`;

            } 
            if (products.length <= 0) {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                selectedProductsDelete.classList.add("hidden");
                prodAllSpan.textContent = "0";
                prodAmountSpan.textContent = `0 ‚ÇΩ`;
            }
        }

        // –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–µ–∫–±–æ–∫—Å–∞–º–∏
        btnDeleteSelectedProducts(e) {
            localStorage.removeItem("cart");
            // –°–æ–±–∏—Ä–∞–µ–º id –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            const selectedIds = new Set(this.selectedProducts.map(prod => prod.id));
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
            this.cartItems = this.cartItems.filter(item => !selectedIds.has(item.id));
            // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
            this.updateCartIconCount();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
            localStorage.setItem("cart", JSON.stringify(this.cartItems));

            // –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            cardsContainer.innerHTML = "";
            this.renderCartItems();

            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            this.selectedProducts = [];
            btnAllSelectProducts.classList.remove("active-select-all");
            localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            selectedProductsDelete.classList.add("hidden");
            prodAllSpan.textContent = "0";
            prodAmountSpan.textContent = `0 ‚ÇΩ`;

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            this.renderArrangeProducts();

        }

        // –£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å", –∫–æ—Ç–æ—Ä–∞—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        deleteOneProduct(e) {

            const productId = e.target.closest(".added-card").dataset.id;

            if (e.target.classList.contains("added-card__remove")) {
                this.cartItems = this.cartItems.filter(prod => {
                    return prod.id != productId;
                });

                this.selectedProducts = this.selectedProducts.filter(prod => {
                    return prod.id != productId;
                });

                localStorage.setItem("cart", JSON.stringify(this.cartItems));
                localStorage.setItem("selectedProd", JSON.stringify(this.selectedProducts));

                // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
                this.updateCartIconCount();

                // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                cardsContainer.innerHTML = "";
                this.renderCartItems();

                // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                this.renderArrangeProducts();
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                this.selectedQuantityAndAmount();
                }

        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        renderArrangeProducts() {
            // wrapperArrangeProducts.innerHTML = "";

            const products = JSON.parse(localStorage.getItem("selectedProd"));

            if (products.length >= 1) {

                // console.log("Product");
                

                // console.log(products);
                


                wrapperArrangeProducts.innerHTML = "";
                products.forEach((prod) => {
                    let html = `
                        <div class="arrange-card" data-id="${prod.id}">
                            <div class="arrange-card__image">
                                <img src="${prod.images}" alt="${prod.title}" />
                            </div>
                            <div class="arrange-card__info">
                                <div class="arrange-card__title">${prod.title}</div>
                                <div class="arrange-card__price">${Math.round(prod.price * 90)} ‚ÇΩ</div>
                            </div>
                            <div class="arrange-card__quantity">
                                <span class="arrange-card__quantity-value">${prod.quantity}</span> –®—Ç
                            </div>
                        </div>
                    `;
                    wrapperArrangeProducts.insertAdjacentHTML("afterbegin", html);
                });
            } 
            if (products.length <= 0) {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                wrapperArrangeProducts.innerHTML = "";
                wrapperArrangeProducts.textContent = "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤";
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ—Ç —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
        updateCartIconCount() {
            numberOfProducts.textContent = this.cartItems.length;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const cartManager = new CartManager();
    cartManager.loadCart();
});